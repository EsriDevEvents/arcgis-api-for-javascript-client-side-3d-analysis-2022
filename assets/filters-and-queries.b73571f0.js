import"./modulepreload-polyfill.b7f2da20.js";import{a as w,i as f,g as s,d as p,j as g,o as h,e as L,f as n,k as I,l as E,m as F}from"./utils.ed0797c0.js";import{h as S,T as A,p as d}from"./vendor.c28ea743.js";w();const e=f(L);e.popup.defaultPopupTemplateEnabled=!0;s(n,e).then(t=>{t.outFields=[p.solarAreaField],g(t)});const y=new S({elevationInfo:{mode:"on-the-ground"}});e.map.add(y);const l=new A({layer:y,view:e,creationMode:"update"});let o;s(n,e).then(t=>{e.whenLayerView(t).then(i=>{l.on("create",a=>{a.state==="complete"&&(o=a.graphic.geometry,i.filter=new d({geometry:o,spatialRelationship:"contains"}))}),l.on("update",a=>{!a.cancelled&&a.graphics.length&&(o=a.graphics[0].geometry,i.filter=new d({geometry:o,spatialRelationship:"contains"}))}),e.ui.add(l,"bottom-left")})});h("query-and-filter",()=>{m()});h("query-and-filter-2",async()=>{const t=await s(n,e),i=await e.whenLayerView(t);i.filter=null,m(o)});let u;async function m(t){I(e);const i=await s(n,e);i.outFields=[p.solarAreaField];const a=await e.whenLayerView(i),r=a.createQuery();r.outStatistics=E,r.where="solarAreaSuitableM2 BETWEEN 200 AND 500",t&&(r.geometry=t,r.spatialRelationship="contains");const c=await a.queryFeatures(r);document.getElementById("sum").innerHTML="Total area: "+c.features[0].attributes[F].toFixed(1),u&&u.remove(),u=a.highlight(c.features)}
